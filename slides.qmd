---
title: "Biarchetypal Analysis in R"
author: "Aleix Alcacer Sales"
# date: 2024/10/16
date-format: full
# institute: "Institut de Noves Tecnologies de la Imatge"
format:
    revealjs: 
        html-math-method: katex
        smaller: true
        scrollable: true
        slide-number: true
        fig-format: svg
        toc-depth: 1
        toc: true
        preview-links: auto
        footer: "Biarchetypal Analysis in R | LatinR 2024"
        # title-slide-attributes:
            # data-background-image: static/background.png
            # data-background-size: cover
            # data-background-opacity: "0.2"        
---

# Introduction

## The concept of *archetype*
	
- Etymologically, the term *archetype* is derived from the Ancient Greek:
    - *árkhō*: 'be the first, the original'
    - *túpos*: 'mold, pattern, prototype'.


-  Some definitions of *archetype* include:
    1. a very typical example of a certain person or thing (*Oxford Dictionary*).
    2. a typical example of something, or the original model of something from which others are copied (*Cambridge Dictionary*).
    3. the original pattern or model of which all things of the same type are representations or copies (*Merriam-Webster Dictionary*).


**"An *archetype* is a typical form or prototype that other objects are derived from"**


## Example: *Inside Out*

In the movie, the main character, Riley, has five archetypal emotions: Joy, Sadness, Fear, Anger, and Disgust.

![Archetypal emotions in *Inside Out* movie ](static/introduction/inside_out_all.png)

---

### New emotions

However, as seen in *Inside Out 2*, not only exists these emotions, but also new emotions can be obtained by combining these:

![Mixed emotions in *Inside Out 2*](static/introduction/inside_out_mixed.png)

---

### Combining archetypal emotions

Therefore, a new wide range of emotions can be obtained by combining the archetypal emotions:

![New emotions obtained from combining the archetypal emotions](static/introduction/inside_out.png)


# Archetypal Analysis in Machine Learning

## Motivation of work {visibility="hidden"}

![Number of publications containing the "archetypal analysis" keyword over the years. Data has been collected from Google Scholar.](static/introduction/trend.png)


## Machine Learning

![Machine learning overview](static/introduction/ml-mindmap.png){.r-stretch}

## Archetypal Analysis (AA)

- Unsupervised machine learning technique introduced by Cutler and Breiman in 1994.
- Identifies extreme points that are representative of the underlying patterns or structures within the data set.
- Represents each data point as a mixture of these archetypes.

::: {.columns}

::: {.column width=50%}

![Dataset](static/aa/dataset.png){.r-stretch}
:::

::: {.column width=50%}
![Archetypes](static/aa/dataset-archetypes.png){.r-stretch}
:::

:::

---

### Formal Definition

Let $\mathfrak{X}=\{\bm{x}^{(1)}, \bm{x}^{(2)}, \ldots, \bm{x}^{(N)}\}$ be a dataset where each $\bm{x}^{(n)} \in \mathbb{R}^M$.

#### Objective

- Find some archetypes $\mathfrak{Z} = \{\bm{z}^{(1)}, \bm{z}^{(2)}, \ldots, \bm{z}^{(K)}\}$ where each $\bm{z}^{(k)} \in \mathbb{R}^M$, which are convex combinations of the data points in $\mathfrak{X}$.

- Simultaneously, each data point $\bm{x}^{(n)}$ is also approximated as a convex combination of these archetypes $\mathfrak{Z}$.

---

#### Archetypes as convex combinations of the data points

Expanding previous definition, each archetype $\bm{Z}_k$, i.e. $\bm{z}^{(k)}$, can be represented as
convex combinations of the data points:
$$ \bm{Z}_k = \sum_{n=1}^{N} \bm{{B}}_{k,n} \bm{X}_n $$

subject to $\|{\bm{{B}}_k}\|_1 = 1$ and $\bm{{B}}_{k,n} \in [0, 1]$.

![Archetypes as convex combinations of the data points](static/aa/arch-as-data.png){.r-stretch}

---

#### Data points as convex combinations of the archetypes

Simultaneously, each data point $\bm{X}_n$, i.e. $\bm{x}^{(n)}$, is then approximated as a convex combination of these archetypes
$$ \bm{X}_n \approx \sum_{k=1}^{K} \bm{{A}}_{n,k} \bm{Z}_k $$
similarly subject to $\|{\bm{{A}}_n}\|_1 = 1$ and $\bm{{A}}_{n,k} \in [0,1]$.


![Data points as convex combinations of the archetypes](static/aa/data-as-arch.png){.r-stretch}

---

#### Matrix notation

This formulation thus involves two matrices of coefficients: $\bm{{B}}$ which defines the archetypes as combinations of the data points, and $\bm{{A}}$ which represents each data point as a mixture of archetypes.

In matrix notation, archetypal analysis can be expressed as:
$$ \bm{X} \approx \bm{A} \bm{Z} = \bm{A} (\bm{B} \bm{X})$$

---

### Computation

$$ \argmin_{\bm{A}, \bm{B}} \|{\bm{X} - \bm{A}\bm{B}\bm{X}}\|^2_F $$
where  $\|{\bm{{A}}_n}\|_1 = 1$, $\bm{{A}}_{n,k} \in [0, 1]$, $\|{\bm{B}_k}\|_1 = 1$ and $\bm{{B}}_{k,n} \in [0, 1]$.

**Steps**

1. Initialize archetypes
2. Loop until error reduction is sufficiently small:
    1. Optimize $\bm{A}$.
    2. Update archetypes, i.e. $\bm{Z} = \bm{A}^{-1} \bm{X}$.
    3. Optimize $\bm{B}$.
    4. Update archetypes, i.e. $\bm{Z} = \bm{B}\bm{X}$.
    5. Compute error $\|{\bm{X} - \bm{A}\bm{B}\bm{X}}\|^2_F$.

---

### Selecting the optimal number of archetypes

- Achieving a balance between complexity and elucidation of data patterns is crucial.
- Archetypes are not necessarily nested; they can change as $K$ increases to better capture data structure.
- The Elbow Method is a preferred approach due to its simplicity and intuitive visual clarity.

![Archetypal Analysis with different number of archetypes](static/aa/n_archetypes.png){.r-stretch}

---

#### The Elbow Method

1. Plot performance metric (variance explained or reconstruction error) vs. number of archetypes.
2. Identify the "elbow" where marginal gains diminish.
3. The elbow indicates the optimal number of archetypes.

![The Elbow Method](static/aa/elbow.png){.r-stretch}

# Archetypal Analysis vs Clustering

## Clustering

- Clustering is a technique used to group similar data points into clusters.
- The goal is to find groups of data points that are similar to each other and dissimilar to data points in other clusters.
- The prototypes of the clusters are the centroids of them.

<br>

::: {.fragment}

| Property | Clustering | Archetypal Analysis |
|----------|------------|---------------------|
| Goal | Group similar data points | Find extreme points |
| Prototypes | Centroids | Extreme points |
:::

## Example

Consider the following dataset representing a set of colors:

```{python}

from archetypes.datasets import make_archetypal_dataset
import numpy as np

# Create a dataset with 1000 samples
archetypes = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])

X, _ = make_archetypal_dataset(archetypes=archetypes, shape=(500,), alpha=1)

generator = np.random.Generator(np.random.PCG64())
X_2 = generator.dirichlet(alpha=(5, 5, 5), size=500)

# Add to X the archetypes
X = np.vstack([X, archetypes])
X = np.vstack([X, X_2])
```

```{python}

#| fig-align: center

from archetypes.visualization import simplex
import matplotlib.colors as mcolors

# convert X to HEX colors
X_color = [mcolors.to_hex(x) for x in X]

# Plot the data
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax = simplex(X, c=X_color, show_edges=False, show_vertices=False, alpha=0.25, ax=ax)

# remove annotations added to ax
for annotation in ax.texts:
    annotation.remove()

plt.show()
```


Q: Which three colors do you think best represent the dataset?

---

```{python}

#| fig-align: center
#| fig-cap: Clustering and Archetypal Analysis prototypes obtained

from sklearn.cluster import KMeans
from archetypes import AA

# Fit a KMeans model with 3 clusters
kmeans = KMeans(n_clusters=3, random_state=0).fit(X)
kmeans_prototypes = kmeans.cluster_centers_
kmeans_prototypes_color = [mcolors.to_hex(x) for x in kmeans_prototypes]

# Fit an AA model with 3 archetypes
aa = AA(n_archetypes=3, random_state=0).fit(X)
aa_prototypes = aa.archetypes_
aa_prototypes_color = [mcolors.to_hex(x) for x in aa_prototypes]

group_color = [kmeans_prototypes_color[label] for label in kmeans.labels_]

```

### Prototypes comparison

As you can imagine, the prototypes obtained by clustering and by archetypal analysis are different:

::: {.columns}

::: {.column width=50%}
::: {.fragment}
```{python}

#| fig-align: center
#| fig-cap: Clustering prototypes

# Plot the data
fig, ax = plt.subplots()
ax = simplex(X, c=X_color, show_edges=False, show_vertices=False, alpha=0.1, ax=ax)

# Plot the KMeans centroids
ax = simplex(kmeans_prototypes, c=kmeans_prototypes_color, show_edges=False, show_vertices=False, alpha=1,s=150, marker="s", ax=ax)

# remove annotations added to ax
for annotation in ax.texts:
    annotation.remove()

# create a legend with the same markers
from matplotlib.lines import Line2D
handles = [Line2D([0], [0], marker='s', color='w', label='Prototypes', markerfacecolor='black', markersize=10, linestyle='None')]

ax.legend(handles=handles, loc='lower right')


plt.show()

```
:::
:::
::: {.column width=50%}
::: {.fragment}
```{python}
#| fig-align: center
#| fig-cap: Archetypal Analysis prototypes


# Plot the data
fig, ax = plt.subplots()
ax = simplex(X, c=X_color, show_edges=False, show_vertices=False, alpha=0.1, ax=ax)


# plot the AA archetypes
ax = simplex(aa_prototypes, c=aa_prototypes_color, show_edges=False, show_vertices=False, alpha=1, s=150, marker='D', ax=ax)


# remove annotations added to ax
for annotation in ax.texts:
    annotation.remove()

# create a legend with the same markers
from matplotlib.lines import Line2D
handles = [Line2D([0], [0], marker='D', color='w', label='Prototypes', markerfacecolor='black', markersize=10, linestyle='None')]

ax.legend(handles=handles, loc='lower right')

plt.show()



plt.show()
```
:::
:::
:::

# Biarchetypal Analysis

## Biarchetypal Analysis (BiAA)

- Extension of Archetypal Anlaysis introduced by Alcacer et al. in 2024.

-  Whose goal is to identify archetypes simultaneously in both rows and columns of a dataset.
- It provides a more interpretable alternative to biclustering, focusing on extreme values in data for better insight.

![Biarchetype Analysis framework](static/aa/scheme.png){.r-stretch}

---

### Formal definition

In BiAA, biarchetypes  are defined by ${\bf Z} = {\bf {\bf B}} {\bf X} {\bf {\bf C}}$, i.e. the archetypes are mixture of the data points and variables. There are $k$ archetypes for rows and $c$ for columns.

Simultanously, the data points are approximated as a convex combination of these biarcehtypes, i.e. ${\bf X} \approx {\bf A} {\bf Z} {\bf D}$.

Therefore, the objective function can be expressed as:

$$
\argmin_{{\bf A}, {\bf B}, {\bf C}, {\bf D}} \left \| {\bf X} - {\bf {\bf A} {\bf B} X {\bf C} {\bf D}}\right \|^2_F
$$
where $\|{\bm{{A}}_n}\|_1 = 1$, $\bm{{A}}_{n,k} \in [0, 1]$, $\|{\bm{B}_k}\|_1 = 1$, $\bm{{B}}_{k,n} \in [0, 1]$, $\|{\bm{C}_c}\|_1 = 1$, $\bm{{C}}_{m,c} \in [0, 1]$, $\|{\bm{D}_m}\|_1 = 1$, $\bm{{D}}_{c, m} \in [0, 1]$.

<!-- 

---

### Computation {visibility="hidden"}

1. Initialize archetypes
2. Loop until error reduction is sufficiently small:
    1. Optimize $\bm{A}$ as in AA.
    2. Optimize $\bm{D}$ as in AA.
    2. Update archetypes, i.e. $\bm{Z} = \bm{A}^{-1} \bm{X} \bm{D}^{-1}$.
    3. Optimize $\bm{B}$ as in AA.
    4. Optimize $\bm{C}$ as in AA.
    4. Update archetypes, i.e. $\bm{Z} = \bm{B}\bm{X}\bm{C}$.
    5. Compute error $\|{\bm{X} - \bm{A}\bm{B}\bm{X}\bm{C}\bm{D}}\|^2_F$.

-->

## Exemple

Consider the following dataset representing a set of colors where axis $X$ represents the hue and axis $Y$ the brightness:

```{python}

import os
import sys
module_path = os.path.abspath(os.path.join('..'))
if module_path not in sys.path:
    sys.path.append(module_path)
```

```{python}
#| fig-align: center
import numpy as np
x_hue = np.linspace(0, 1, 20, endpoint=False)
y_value = np.linspace(0.4, 1, 20, endpoint=False)

import matplotlib.colors as mcolors
xy_rgb = np.array([[mcolors.hsv_to_rgb([h, 1., value]) for h in x_hue] for value in y_value])


from archetypes.datasets import shuffle_dataset
# xy_rgb, _ = shuffle_dataset(xy_rgb, ndim=2, generator=0)

fig, ax = plt.subplots()
ax.imshow(xy_rgb)
ax.axis('off')
plt.show()
```

Q: Which archetypes do you think we will obtain from this dataset?

---

### Archetypes comparison

As you can imagine, the prototypes obtained by Archetypal Analysis and Biarchetypal Analysis are different:

::: {.fragment}
```{python}
#| fig-align: center
#| layout-ncol: 2
#| fig-cap:
#|   - <br> Archetypal Analysis with 2 archetypes in $Y$ axis
#|   - Archetypal Analysis with 3 archetypes in $X$ axis
#| 
from models.naa import NAA
import torch
xy_rgb_torch = torch.tensor(xy_rgb).float()

aa_model = NAA(n_archetypes=(2,), shape=(xy_rgb.shape))
aa_model.fit(xy_rgb_torch, n_epochs=1000, learning_rate=0.1)
aa_archetypes = aa_model.Z.detach().numpy()
aa_archetypes = xy_rgb[[0, 19], :]

aa_2_model = NAA(n_archetypes=(3,), shape=(xy_rgb.transpose(1, 0, 2).shape))
aa_2_model.fit(torch.tensor(xy_rgb.transpose(1, 0, 2)).float(), n_epochs=200, learning_rate=0.2)
aa_2_archetypes = aa_2_model.Z.detach().numpy()
aa_2_archetypes = xy_rgb.transpose(1, 0, 2)[[0, 6, 13], :]

fig, ax = plt.subplots(figsize=(8, 1))
ax.imshow(aa_archetypes)
ax.axis('off')
plt.show()

fig, ax = plt.subplots(figsize=(8, 1.5))
ax.imshow(aa_2_archetypes)
ax.axis('off')
plt.show()
```

:::

::: {.fragment}

```{python}
#| fig-align: center
#| fig-cap: Biarchetypal Analysis with 2 archetypes in $Y$ axis and 3 archetypes in $X$ axis
naa_model = NAA(n_archetypes=(2, 3), shape=(xy_rgb.shape))
naa_model.fit(xy_rgb_torch, n_epochs=1000, learning_rate=0.1)
naa_archetypes = naa_model.Z.detach().numpy()
naa_archetypes = xy_rgb[[0, 19]][:, [0, 6, 13]]


# two subplots in one line
fig, ax = plt.subplots(figsize=(1.5, 0.8))
ax.imshow(naa_archetypes)
ax.axis('off')
plt.show()
```
:::

---
 
### Biarchetypes vs Ensemble Archetypes

- Models:
    - Biarchetypal Analysis: $Z_{biaa} = B X C$
    - Ensemble Archetypes: $Z_{aa} = B_{rows} X {B_{cols}}^T$

![Biarchetypes vs Ensembled Archetypes](static/biaa/dist-archetypes.png){.r-stretch}


# R Package


## `biaa` package

::: aside
[https://aleixalcacer.github.io/biaa](https://aleixalcacer.github.io/biaa)
:::

`biaa` is a R package offering a user-friendly interface for Biarchetype Analysis.

- Implements the biarchetype analysis algorithm.
- Integrates visualization tools for optimal selection of the number of archetypes.
- Fully open-source and community-driven project.
- Exists also a Python package called `archetypes` that includes the same algorithm.

### Installation

```r
# Install the development version from GitHub

devtools::install_github("aleixalcacer/biaa")
```
---

### Example

#### Data generation

```r
n <- 100; m <- 100;

ax <- 1:(n/2); ay <- (m/2+1):m;
bx <- (n/2+1):n; by <- 1:(m/2);

data <- array(0.5, dim = c(n, m))
data[ax, ay] = 0
data[bx, by] = 1

data <- data + array(rnorm(n * m, 0, 0.2), dim = c(n, m))

image(data, axes=FALSE)
```

![](static/example/data.png){.r-stretch fig-align="center"}


---

#### Shuffling data

```r
shuf_rows <- sample(n, n)
shuf_cols <- sample(m, m)

shuf_data <- data[shuf_rows, shuf_cols]

image(shuf_data, axes=FALSE)
```

![](static/example/shuffled-data.png){.r-stretch fig-align="center"}
---

#### Biarchetypal analysis

```r
k <- 1:4
c <- 1:4

arch <- biaa::biaa(shuf_data, k, c, nrep = 5, maxiter = 5000)
```

<br>

#### Elbow method

::: {.columns}

::: {.column width=50%}


```r


biaa::rssplot(arch)
```

![](static/example/rss.png)

:::
::: {.column width=50%}
```r
par(mfrow = c(1, 2))
biaa:::rssplot(arch, phi = 0, theta = -180)
biaa:::rssplot(arch, phi = 0, theta = 90)
```

![](static/example/rotated-rss.png)

:::
:::
---

#### Results

```r
barch <- biaa::getmodel(arch, k = 2, c = 2)

maxalphas <- apply(barch$alphas, 1, which.max)
ord_rows <- order(maxalphas)

maxgammas <- apply(barch$gammas, 2, which.max)
ord_cols <- order(maxgammas)

image(shuf_data[ord_rows, ord_cols], axes = FALSE)
```

![](static/example/ordered-data.png){.r-stretch fig-align="center"}

# Conclusions

## Summary

- The concept of *archetype* refers to a typical form or prototype that other objects are derived from.
- Archetypal Analysis is a technique used to find extreme points (archetypes) in a dataset.
- The prototypes obtained by Archetypal Analysis often offers more interpretable results than clustering.
- Biarchetypal Analysis is an extension of Archetypal Analysis that allows to find archetypes in two dimensions simultaneously.
- There is a R package called `biaa` that makes it easy to compute biarchetypes.


## Main References

  - Alcacer, A., Epifanio, I., & Gual-Arnau, X. (2024). Biarchetype Analysis: Simultaneous Learning of Observations and Features Based on Extremes. IEEE Transactions on Pattern Analysis and Machine Intelligence, 1–12. https://doi.org/10.1109/TPAMI.2024.3400730
  - Cutler, A., & Breiman, L. (1994). Archetypal Analysis. Technometrics, 36(4), 338–347. https://doi.org/10.2307/1269949
  - Mørup, M., & Hansen, L. K. (2012). Archetypal analysis for machine learning and data mining. Neurocomputing, 80, 54–63. https://doi.org/10.1016/j.neucom.2011.06.033


## Thank you ❤️ {.center}
